/*AULA 04.1 - JUNTANDO TABELAS DURANTE A SELEÇÃO*/
SELECT * FROM TABELA_DE_VENDEDORES;
SELECT * FROM NOTAS_FISCAIS;

SELECT MATRICULA, COUNT(*) AS NUMERO_NOTAS FROM NOTAS_FISCAIS 
GROUP BY MATRICULA

SELECT NOTAS_FISCAIS.MATRICULA, TABELA_DE_VENDEDORES.NOME, COUNT(*) AS NUMERO_NOTAS 
FROM NOTAS_FISCAIS
INNER JOIN TABELA_DE_VENDEDORES 
ON NOTAS_FISCAIS.MATRICULA = TABELA_DE_VENDEDORES.MATRICULA
GROUP BY NOTAS_FISCAIS.MATRICULA, NOME;

/*COM ALIAS*/
SELECT NF.MATRICULA, TV.NOME, COUNT(*) AS NUMERO_NOTAS 
FROM TABELA_DE_VENDEDORES TV
INNER JOIN NOTAS_FISCAIS NF
ON NF.MATRICULA = TV.MATRICULA
GROUP BY NF.MATRICULA, TV.NOME;

/*AULA 04.2 - DESAFIO: NOME DO PRODUTO*/
SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) AS QUANTIDADE
FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO 
HAVING SUM(INF.QUANTIDADE) > 394000 
ORDER BY SUM(INF.QUANTIDADE) DESC;

/*AULA 04.5 - PRATICANDO O LEFT JOIN*/

SELECT DISTINCT
TC.CPF AS CPF_DO_CADASTRO,
TC.NOME AS NOME_DO_CLIENTE,
NF.CPF CPF_DA_NOTA
FROM TABELA_DE_CLIENTES TC
INNER JOIN
NOTAS_FISCAIS NF
ON TC.CPF = NF.CPF

/*Contar total clientes*/
SELECT COUNT(*) FROM TABELA_DE_CLIENTES;

/*Incluir cliente novo*/
INSERT INTO TABELA_DE_CLIENTES
(CPF, NOME, ENDERECO_1, ENDERECO_2, BAIRRO,CIDADE, ESTADO, CEP, DATA_DE_NASCIMENTO, IDADE, GENERO, LIMITE_DE_CREDITO,
VOLUME_DE_COMPRA, PRIMEIRA_COMPRA)
VALUES ('23412632331', 'Juliana Silva', 'R. Tanabda', '', 'Bangu', 'Rio de Janeiro', 'RJ', '2340000', '1989-02-04', 33, 'F',
180000, 24500,0);

/*imaginando um cenário que vc queira saber qual o cliente, na qual a db tenha uma quantidade de clientes muito maior*/
SELECT DISTINCT
TC.CPF AS CPF_DO_CADASTRO,
TC.NOME AS NOME_DO_CLIENTE,
NF.CPF CPF_DA_NOTA
FROM TABELA_DE_CLIENTES TC
LEFT JOIN
NOTAS_FISCAIS NF
ON TC.CPF = NF.CPF

/*Cliente cadastrado que não efetuou nenhuma compra.*/
SELECT DISTINCT
TC.CPF AS CPF_DO_CADASTRO,
TC.NOME AS NOME_DO_CLIENTE
FROM TABELA_DE_CLIENTES TC
LEFT JOIN
NOTAS_FISCAIS NF
ON TC.CPF = NF.CPF
WHERE NF.CPF IS NULL;

/*AULA 04.7 - PRATICANDO OUTROS TIPOS DE JOIN*/
SELECT COUNT(*) FROM TABELA_DE_CLIENTES; --16 CLIENTES >>>> 7 POSSUEM VENDEDORES NO BAIRRO.
SELECT COUNT(*) FROM TABELA_DE_VENDEDORES; -- 4 VENDEDORES >>>> 3 POSSUEM CLIENTES NO BAIRRO.

-- QUAL O VENDEDOR QUE NÃO TEM CLIENTE NO SEU BAIRRO? 
--R: Roberta Martins.
SELECT DISTINCT
TV.NOME AS NOME_DO_VENDEDOR
, TV.BAIRRO AS BAIRRO_DO_VENDEDOR
, TC.BAIRRO AS BAIRRO_DO_CLIENTE
, TC.NOME AS NOME_DO_CLIENTE
FROM
TABELA_DE_CLIENTES TC
RIGHT JOIN
TABELA_DE_VENDEDORES TV
ON TC.BAIRRO = TV.BAIRRO
WHERE TC.NOME IS NULL

-- QUAL O CLIENTE QUE NÃO TEM VENDEDOR EM SEU BAIRRO ? 
--R: 9 clientes.
--Fernando Cavalcante
--Juliana Silva
--Fabio Carvalho
--Marcelo Mattos
--Edson Meilelles
--Abel Silva 
--Marcos Nogueira
--Petra Oliveira
--Walber Lontra

SELECT DISTINCT
TV.NOME AS NOME_DO_VENDEDOR
, TV.BAIRRO AS BAIRRO_DO_VENDEDOR
, TC.BAIRRO AS BAIRRO_DO_CLIENTE
, TC.NOME AS NOME_DO_CLIENTE
FROM
TABELA_DE_CLIENTES TC
LEFT JOIN
TABELA_DE_VENDEDORES TV
ON TC.BAIRRO = TV.BAIRRO
WHERE TV.NOME IS NULL

--As 2 consultas acima poderiam ser simplificadas e rodadas em apenas uma consulta, utilizando o FULL JOIN
-- e retirando a condição "WHERE";
SELECT DISTINCT
TV.NOME AS NOME_DO_VENDEDOR
, TV.BAIRRO AS BAIRRO_DO_VENDEDOR
, TC.BAIRRO AS BAIRRO_DO_CLIENTE
, TC.NOME AS NOME_DO_CLIENTE
FROM
TABELA_DE_CLIENTES TC
FULL JOIN
TABELA_DE_VENDEDORES TV
ON TC.BAIRRO = TV.BAIRRO

/*AULA 04.9 - UNINDO CONSULTAS*/
SELECT DISTINCT BAIRRO FROM TABELA_DE_CLIENTES
--12 
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES
--4
/*UNION*/
SELECT DISTINCT BAIRRO FROM TABELA_DE_CLIENTES
UNION
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES

/*UNION ALL*/
SELECT DISTINCT BAIRRO FROM TABELA_DE_CLIENTES
UNION ALL
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES

SELECT DISTINCT BAIRRO, 'CLIENTE'AS ORIGEM FROM TABELA_DE_CLIENTES
UNION ALL --EXCLUINDO O ALL ELE CONTINUA COM O MESMO RESULTADO, POR CONTA DA COLUNA ORIGEM QUE FOI CRIADA.
SELECT DISTINCT BAIRRO, 'FORNECEDOR'AS ORIGEM FROM TABELA_DE_VENDEDORES

/*AULA 04.11 - SUBCONSULTAS NO COMANDO IN*/
SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES

SELECT * FROM TABELA_DE_CLIENTES 
WHERE BAIRRO IN ('Copacabana', 'Jardins', 'Santo Amaro', 'Tijuca')

--SUBQUERY (FAZENDO O MESMO QUE AS DUAS CONSULTAS ACIMA)
SELECT * FROM TABELA_DE_CLIENTES 
WHERE BAIRRO IN (SELECT DISTINCT BAIRRO FROM TABELA_DE_VENDEDORES)

/*DESAFIO 12 - BUSCANDO OS SABORES DOS PRODUTOS MAIS VENDIDOS*/
SELECT DISTINCT SABOR FROM TABELA_DE_PRODUTOS WHERE
CODIGO_DO_PRODUTO IN (
SELECT INF.CODIGO_DO_PRODUTO FROM ITENS_NOTAS_FISCAIS  INF
INNER JOIN TABELA_DE_PRODUTOS TP 
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO HAVING SUM(INF.QUANTIDADE) > 394000 );

/*AULA 04.13 - SUBCONSULTAS SUBSTITUINDO O HAVING*/
SELECT EMBALAGEM, AVG (PRECO_DE_LISTA) AS PRECO_MEDIO
FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM

--COM HAVING
SELECT EMBALAGEM, AVG (PRECO_DE_LISTA) AS PRECO_MEDIO
FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM
HAVING AVG(PRECO_DE_LISTA) <= 10

--COM SUBQUERY
SELECT MEDIA_EMBALAGENS.EMBALAGEM, 
MEDIA_EMBALAGENS.PRECO_MEDIO FROM 
(SELECT EMBALAGEM, AVG (PRECO_DE_LISTA) AS PRECO_MEDIO
FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM) MEDIA_EMBALAGENS
WHERE MEDIA_EMBALAGENS.PRECO_MEDIO <= 10

/*DESAFIO 14 - TRANSFORMANDO O HAVING EM SUBCONSULTAS*/

SELECT SC.CODIGO_DO_PRODUTO, SC.NOME_DO_PRODUTO, SC.QUANTIDADE_TOTAL
FROM
(SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO, SUM(INF.QUANTIDADE) 
AS QUANTIDADE_TOTAL
FROM ITENS_NOTAS_FISCAIS  INF
INNER JOIN TABELA_DE_PRODUTOS TP 
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO) SC
WHERE SC.QUANTIDADE_TOTAL > 394000
ORDER BY SC.QUANTIDADE_TOTAL DESC;

/*AULA 04.15 - VISÃO*/
--Consulta Anterior... 
SELECT MEDIA_EMBALAGENS.EMBALAGEM, 
MEDIA_EMBALAGENS.PRECO_MEDIO FROM 
(SELECT EMBALAGEM, AVG (PRECO_DE_LISTA) AS PRECO_MEDIO
FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM) MEDIA_EMBALAGENS
WHERE MEDIA_EMBALAGENS.PRECO_MEDIO <= 10

-- Em outra consulta, foi criado uma View "MEDIA_EMBALAGENS"
--CREATE VIEW MEDIA_EMBALAGENS
--AS
--SELECT EMBALAGEM, AVG (PRECO_DE_LISTA) AS PRECO_MEDIO
--FROM TABELA_DE_PRODUTOS GROUP BY EMBALAGEM

-- A view (visão) agora funciona como uma tabela virtual, podendo ser acessada de vários locais.
-- tem a desvantagem de ter uma performance pior que uma seleção normal de uma tabela;
SELECT EMBALAGEM, PRECO_MEDIO
FROM MEDIA_EMBALAGENS
WHERE PRECO_MEDIO <= 10;

/*DESAFIO 15 - USANDO VISÃO PARA SUBSTITUIR O HAVING*/
CREATE VIEW VW_QUANTIDADE_PRODUTOS
AS
SELECT INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO,
SUM(INF.QUANTIDADE) 
AS QUANTIDADE TOTAL
FROM ITENS_NOTAS_FISCAIS INF
INNER JOIN TABELA_DE_PRODUTOS TP
ON INF.CODIGO_DO_PRODUTO = TP.CODIGO_DO_PRODUTO
GROUP BY INF.CODIGO_DO_PRODUTO, TP.NOME_DO_PRODUTO;

SELECT * FROM VW_QUANTIDADE_PRODUTOS
WHERE QUANTIDADE_TOTAL > 394000
ORDER BY QUANTIDADE_TOTAL DESC;
